import numpy as np
import bitstring
from pdb import *
from chainer.functions.connection.linear import linear

from userfunc_var import VAR, GenFP
var = VAR()

# Change fault bit in float32
import ctypes
class __f2i_union(ctypes.Union):
    _fields_=[('float',ctypes.c_float),('uint',ctypes.c_uint)]

def bitChange(v,bit,sa01):
    f2i_union = __f2i_union(v)
    normal    = __f2i_union(v)
    normal1s= bin(normal.uint).count("1")
    if sa01 == 1:
        faultValue = f2i_union.uint | (0x01<<bit)
        fault1s = bin(faultValue).count("1")
        if (normal1s) != (fault1s) and (normal1s) != (fault1s - 1):
            print("***** sa1>>>internal error bit operation {}-{}".format(normal1s,fault1s))
    elif sa01 == 0:
        faultValue = f2i_union.uint & ~(0x01<<bit)
        fault1s = bin(faultValue).count("1")
        if (normal1s) != (fault1s) and (normal1s) != (fault1s + 1):
            print("***** sa0>>>internal error bit operation {}-{}".format(normal1s,fault1s))
    else:
        assert False, "sa01 is out of value sa01={}".format(sa01)
    f2i_union.uint = faultValue
    return f2i_union.float, f2i_union.uint

##############################################################
# This file was automatically generated by UserHook system.
# Copy this file as ./userfunc.py
# And edit it.
# You can get results to expect. Lucks, K.Ogura.
##############################################################
#import numpy as np
def conv1_Convolution2D(_in,_out):
    _name='conv1_Convolution2D'
    pass

def bn1_BatchNormalization(_in,_out):
    _name='bn1_BatchNormalization'
    pass

def conv2_Convolution2D(_in,_out):
    _name='conv2_Convolution2D'
    pass

def bn2_BatchNormalization(_in,_out):
    _name='bn2_BatchNormalization'
    pass

def l1_Linear(_in,_out):
    _name='l1_Linear'
    pass

def l2_Linear(_in,_out):
    _name='l2_Linear'
    pass

